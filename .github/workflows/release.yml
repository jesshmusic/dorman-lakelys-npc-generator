name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate version format
        run: |
          if ! [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format. Use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi

      - name: Check if version exists in package.json
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
            echo "::error::Version in package.json ($CURRENT_VERSION) doesn't match input version (${{ github.event.inputs.version }})"
            echo "Please run 'npm run release:patch/minor/major' first to update the version"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create module archive
        run: zip -r ./module.zip module.json README.md LICENSE styles/ templates/ lang/ scripts/ artwork/

      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"

      - name: Extract latest changelog entry
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(awk '/^## \[/{if(++n==1) flag=1; else flag=0} flag' CHANGELOG.md)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            ---

            **Manually released version ${{ github.event.inputs.version }}**
          artifacts: './module.json,./module.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

      - name: Notify FoundryVTT Package Release API
        run: |
          curl -X POST https://foundryvtt.com/_api/packages/release_version/ \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.FOUNDRY_PACKAGE_TOKEN }}" \
            -d '{
              "id": "dorman-lakelys-npc-generator",
              "dry-run": false,
              "release": {
                "version": "${{ github.event.inputs.version }}",
                "manifest": "https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/module.json",
                "notes": "https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }}",
                "compatibility": {
                  "minimum": "11",
                  "verified": "13"
                }
              }
            }'
